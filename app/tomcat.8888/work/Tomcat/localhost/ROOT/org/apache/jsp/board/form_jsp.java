/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-03-21 05:38:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/Users/swc/.gradle/caches/modules-2/files-2.1/javax.servlet/jstl/1.2/74aca283cd4f4b4f3e425f5820cda58f44409547/jstl-1.2.jar", Long.valueOf(1709170617843L));
    _jspx_dependants.put("jar:file:/Users/swc/.gradle/caches/modules-2/files-2.1/javax.servlet/jstl/1.2/74aca283cd4f4b4f3e425f5820cda58f44409547/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang='en'>\n");
      out.write("<head>\n");
      out.write("    <!-- TUI 에디터 CSS CDN -->\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://uicdn.toast.com/editor/latest/toastui-editor.min.css\"/>\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js\"></script>\n");
      out.write("    <meta charset='UTF-8'>\n");
      out.write("    <title>비트캠프 5기</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/header.jsp", out, false);
      out.write("<h1>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h1>\n");
      out.write("\n");
      out.write("<form id=\"myForm\">\n");
      out.write("    <input name='category' type='hidden' value='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'>\n");
      out.write("    <div>\n");
      out.write("        제목: <input type='text' name='title'>\n");
      out.write("    </div>\n");
      out.write("    <div id='content'>\n");
      out.write("        ");
      out.write("</div>\n");
      out.write("    ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("<div>\n");
      out.write("        <button>등록</button>\n");
      out.write("    </div>\n");
      out.write("</form>\n");
      out.write("<div id=\"viewer\"></div>\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/footer.jsp", out, false);
      out.write("</body>\n");
      out.write("<script src=\"https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("    // const editor = new toastui.Editor({\n");
      out.write("    //     el: document.querySelector('#content'), // 에디터를 적용할 요소 (컨테이너)\n");
      out.write("    //     height: '500px',                        // 에디터 영역의 높이 값 (OOOpx || auto)\n");
      out.write("    //     initialEditType: 'markdown',            // 최초로 보여줄 에디터 타입 (markdown || wysiwyg)\n");
      out.write("    //     initialValue: '내용을 입력해 주세요.',     // 내용의 초기 값으로, 반드시 마크다운 문자열 형태여야 함\n");
      out.write("    //     previewStyle: 'vertical'                // 마크다운 프리뷰 스타일 (tab || vertical)\n");
      out.write("    // });\n");
      out.write("    const content = `\n");
      out.write("![image](https://uicdn.toast.com/toastui/img/tui-editor-bi.png)\n");
      out.write("\n");
      out.write("# Awesome Editor!\n");
      out.write("\n");
      out.write("It has been _released as opensource in 2018_ and has ~~continually~~ evolved to **receive 10k GitHub ⭐️ Stars**.\n");
      out.write("\n");
      out.write("## Create Instance\n");
      out.write("\n");
      out.write("You can create an instance with the following code and use \\`getHtml()\\` and \\`getMarkdown()\\` of the [Editor](https://github.com/nhn/tui.editor).\n");
      out.write("\n");
      out.write("\\`\\`\\`js\n");
      out.write("const editor = new Editor(options);\n");
      out.write("\\`\\`\\`\n");
      out.write("\n");
      out.write("> See the table below for default options\n");
      out.write("> > More API information can be found in the document\n");
      out.write("\n");
      out.write("| name | type | description |\n");
      out.write("| --- | --- | --- |\n");
      out.write("| el | \\`HTMLElement\\` | container element |\n");
      out.write("\n");
      out.write("## Features\n");
      out.write("\n");
      out.write("* CommonMark + GFM Specifications\n");
      out.write("   * Live Preview\n");
      out.write("   * Scroll Sync\n");
      out.write("   * Auto Indent\n");
      out.write("   * Syntax Highlight\n");
      out.write("        1. Markdown\n");
      out.write("        2. Preview\n");
      out.write("\n");
      out.write("## Support Wrappers\n");
      out.write("\n");
      out.write("> * Wrappers\n");
      out.write(">    1. [x] React\n");
      out.write(">    2. [x] Vue\n");
      out.write(">    3. [ ] Ember\n");
      out.write("`\n");
      out.write("\n");
      out.write("\n");
      out.write("    const {Editor} = toastui;\n");
      out.write("\n");
      out.write("    const editor = new Editor({\n");
      out.write("        el: document.querySelector('#content'),\n");
      out.write("        previewStyle: 'vertical',\n");
      out.write("        height: '500px',\n");
      out.write("        initialValue: content,\n");
      out.write("        theme: 'dark'\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    const viewer = Editor.factory({\n");
      out.write("        el: document.querySelector('#viewer'),\n");
      out.write("        viewer: true,\n");
      out.write("        height: '500px',\n");
      out.write("        initialValue: content,\n");
      out.write("        theme: 'dark'\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    let markdown = editor.getMarkdown();\n");
      out.write("</script>\n");
      out.write("<script>\n");
      out.write("    const formData = new FormData(document.getElementById(\"myForm\"));\n");
      out.write("    formData.append(\"content\", markdown);\n");
      out.write("\n");
      out.write("    function add() {\n");
      out.write("        $.ajax({\n");
      out.write("            type: 'post',           // 타입 (get, post, put 등등)\n");
      out.write("            url: '/app/board/add',           // 요청할 서버url\n");
      out.write("            async: true,            // 비동기화 여부 (default : true)\n");
      out.write("            headers: {              // Http header\n");
      out.write("                \"Content-Type\": \"application/json\",\n");
      out.write("                \"X-HTTP-Method-Override\": \"POST\"\n");
      out.write("            },\n");
      out.write("            dataType: 'text',       // 데이터 타입 (html, xml, json, text 등등)\n");
      out.write("            data: JSON.stringify({  // 보낼 데이터 (Object , String, Array)\n");
      out.write("                \"content\":markdown\n");
      out.write("            }),\n");
      out.write("            success: function (result) { // 결과 성공 콜백함수\n");
      out.write("                console.log(result);\n");
      out.write("            },\n");
      out.write("            error: function (request, status, error) { // 결과 에러 콜백함수\n");
      out.write("                console.log(error)\n");
      out.write("            }\n");
      out.write("        })\n");
      out.write("    }\n");
      out.write("    console.dir(formData)\n");
      out.write("\n");
      out.write("    let entries = formData.entries();\n");
      out.write("    for (const x of entries) {\n");
      out.write("        console.log(x[0], \": \", x[1]);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $(\"button\").click(add);\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /board/form.jsp(29,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${category == 1}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("<div>\n");
          out.write("            첨부파일: <input name='attachedFiles' type='file' multiple>\n");
          out.write("        </div>\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
